// filtering out menu to delete 

app.delete("/menu/:id", (req, res) => {
  const menuIdToDelete = Number(req.params.id);
  const menuToDelete = menus.find((menu) => menu.id === menuIdToDelete);

  if (menuToDelete) {
    const remainingMenus = menus.filter((menu) => menu.id !== menuIdToDelete);
    // filtering deleted menu
    menus = remainingMenus;
    res.send(remainingMenus);
  } else {
    res.send(menus);
  }
});

................................................

app.delete("/menu/:id", (req, res) => {
  const menuIdToDelete = Number(req.params.id);
  const menuToDelete = menus.find((menu) => menu.id === menuIdToDelete);

  if (menuToDelete) {
    // filtering out menu to delete
    menus = menus.filter((menu) => menu.id !== menuIdToDelete);

    res.send(menus);
  } else {
    res.send(menus);
  } 
});


--------------------------------------------------------------------------------------------------------------


app.put("/menu", (req, res) => {
  const menuToUpdate = req.body;
  const updateMenu = menus.find((menu) => menu.id === menuToUpdate.id);

  if (updateMenu) {
    const newMenu = menus.map((menu) => {
      if (menu.id === menuToUpdate.id) {
        return { ...menuToUpdate, isArchived: false };
      } else {
        return menu;
      }
    });
    res.send(newMenu);
  } else {
    res.send(menus);
  }
});

............................................................

app.put("/menu", (req, res) => {
  const menuToUpdate = req.body;
  const updateMenu = menus.find((menu) => menu.id === menuToUpdate.id);

  if (updateMenu) {
    menus = menus.map((menu) => {
      if (menu.id === menuToUpdate.id) {
        return { ...menuToUpdate, isArchived: false, assetUrl: "" };
      } else {
        return menu;
      }
    });
    res.send(menus);
  } else {
    res.send(menus);
  }
});


--------------------------------------------------------------------------------------------------------------
